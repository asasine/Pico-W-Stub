"""
Module: 'builtins' on micropython-v1.19.1-rp2
"""
# MCU: {'ver': 'v1.19.1', 'build': '', 'sysname': 'rp2', 'platform': 'rp2', 'version': '1.19.1', 'release': '1.19.1', 'port': 'rp2', 'family': 'micropython', 'name': 'micropython', 'machine': 'Raspberry Pi Pico W with RP2040', 'nodename': 'rp2'}

class ArithmeticError(Exception):
    ...

class AssertionError(Exception):
    ...

class AttributeError(Exception):
    ...

class EOFError(Exception):
    ...
Ellipsis : ... ## <class ''> = Ellipsis

class GeneratorExit():
    def __init__(self, *argv, **kwargs) -> None:
        ...


class ImportError(Exception):
    ...

class IndentationError(Exception):
    ...

class IndexError(Exception):
    ...

class KeyError(Exception):
    ...

class KeyboardInterrupt(Exception):
    ...

class LookupError(Exception):
    ...

class MemoryError(Exception):
    ...

class NameError(Exception):
    ...

class NotImplementedError(Exception):
    ...

class OSError(Exception):
    ...

class OverflowError(Exception):
    ...

class RuntimeError(Exception):
    ...

class StopIteration(Exception):
    ...

class SyntaxError(Exception):
    ...

class SystemExit(Exception):
    ...

class TypeError(Exception):
    ...

class ValueError(Exception):
    ...

class ZeroDivisionError(Exception):
    ...
def abs(*args, **kwargs) -> ...:
    ...

def all(*args, **kwargs) -> ...:
    ...

def any(*args, **kwargs) -> ...:
    ...


class bool():
    def __init__(self, *argv, **kwargs) -> None:
        ...


class bytearray():
    def __init__(self, *argv, **kwargs) -> None:
        ...

    def append(self, *args, **kwargs) -> ...:
        ...

    def extend(self, *args, **kwargs) -> ...:
        ...

    def decode(self, *args, **kwargs) -> ...:
        ...


class bytes():
    def __init__(self, *argv, **kwargs) -> None:
        ...

    def count(self, *args, **kwargs) -> ...:
        ...

    def endswith(self, *args, **kwargs) -> ...:
        ...

    def find(self, *args, **kwargs) -> ...:
        ...

    def format(self, *args, **kwargs) -> ...:
        ...

    def index(self, *args, **kwargs) -> ...:
        ...

    def isalpha(self, *args, **kwargs) -> ...:
        ...

    def isdigit(self, *args, **kwargs) -> ...:
        ...

    def islower(self, *args, **kwargs) -> ...:
        ...

    def isspace(self, *args, **kwargs) -> ...:
        ...

    def isupper(self, *args, **kwargs) -> ...:
        ...

    def join(self, *args, **kwargs) -> ...:
        ...

    def lower(self, *args, **kwargs) -> ...:
        ...

    def lstrip(self, *args, **kwargs) -> ...:
        ...

    def replace(self, *args, **kwargs) -> ...:
        ...

    def rfind(self, *args, **kwargs) -> ...:
        ...

    def rindex(self, *args, **kwargs) -> ...:
        ...

    def rsplit(self, *args, **kwargs) -> ...:
        ...

    def rstrip(self, *args, **kwargs) -> ...:
        ...

    def split(self, *args, **kwargs) -> ...:
        ...

    def startswith(self, *args, **kwargs) -> ...:
        ...

    def strip(self, *args, **kwargs) -> ...:
        ...

    def upper(self, *args, **kwargs) -> ...:
        ...

    def center(self, *args, **kwargs) -> ...:
        ...

    def decode(self, *args, **kwargs) -> ...:
        ...

    def partition(self, *args, **kwargs) -> ...:
        ...

    def rpartition(self, *args, **kwargs) -> ...:
        ...

    def splitlines(self, *args, **kwargs) -> ...:
        ...

def callable(*args, **kwargs) -> ...:
    ...

def chr(*args, **kwargs) -> ...:
    ...


class dict():
    def __init__(self, *argv, **kwargs) -> None:
        ...

    def clear(self, *args, **kwargs) -> ...:
        ...

    def copy(self, *args, **kwargs) -> ...:
        ...

    def get(self, *args, **kwargs) -> ...:
        ...

    def items(self, *args, **kwargs) -> ...:
        ...

    def keys(self, *args, **kwargs) -> ...:
        ...

    def pop(self, *args, **kwargs) -> ...:
        ...

    def popitem(self, *args, **kwargs) -> ...:
        ...

    def setdefault(self, *args, **kwargs) -> ...:
        ...

    def update(self, *args, **kwargs) -> ...:
        ...

    def values(self, *args, **kwargs) -> ...:
        ...

    @classmethod
    def fromkeys(cls, *args, **kwargs) -> ...:
        ...

def dir(*args, **kwargs) -> ...:
    ...

def divmod(*args, **kwargs) -> ...:
    ...

def eval(*args, **kwargs) -> ...:
    ...

def exec(*args, **kwargs) -> ...:
    ...

def getattr(*args, **kwargs) -> ...:
    ...

def globals(*args, **kwargs) -> ...:
    ...

def hasattr(*args, **kwargs) -> ...:
    ...

def hash(*args, **kwargs) -> ...:
    ...

def id(*args, **kwargs) -> ...:
    ...


class int():
    def __init__(self, *argv, **kwargs) -> None:
        ...

    @classmethod
    def from_bytes(cls, *args, **kwargs) -> ...:
        ...

    def to_bytes(self, *args, **kwargs) -> ...:
        ...

def isinstance(*args, **kwargs) -> ...:
    ...

def issubclass(*args, **kwargs) -> ...:
    ...

def iter(*args, **kwargs) -> ...:
    ...

def len(*args, **kwargs) -> ...:
    ...


class list():
    def __init__(self, *argv, **kwargs) -> None:
        ...

    def append(self, *args, **kwargs) -> ...:
        ...

    def clear(self, *args, **kwargs) -> ...:
        ...

    def copy(self, *args, **kwargs) -> ...:
        ...

    def count(self, *args, **kwargs) -> ...:
        ...

    def extend(self, *args, **kwargs) -> ...:
        ...

    def index(self, *args, **kwargs) -> ...:
        ...

    def insert(self, *args, **kwargs) -> ...:
        ...

    def pop(self, *args, **kwargs) -> ...:
        ...

    def remove(self, *args, **kwargs) -> ...:
        ...

    def reverse(self, *args, **kwargs) -> ...:
        ...

    def sort(self, *args, **kwargs) -> ...:
        ...

def locals(*args, **kwargs) -> ...:
    ...


class map():
    def __init__(self, *argv, **kwargs) -> None:
        ...

def next(*args, **kwargs) -> ...:
    ...


class object():
    def __init__(self, *argv, **kwargs) -> None:
        ...

def open(*args, **kwargs) -> ...:
    ...

def ord(*args, **kwargs) -> ...:
    ...

def pow(*args, **kwargs) -> ...:
    ...

def print(*args, **kwargs) -> ...:
    ...


class range():
    def __init__(self, *argv, **kwargs) -> None:
        ...

def repr(*args, **kwargs) -> ...:
    ...

def round(*args, **kwargs) -> ...:
    ...


class set():
    def __init__(self, *argv, **kwargs) -> None:
        ...

    def clear(self, *args, **kwargs) -> ...:
        ...

    def copy(self, *args, **kwargs) -> ...:
        ...

    def pop(self, *args, **kwargs) -> ...:
        ...

    def remove(self, *args, **kwargs) -> ...:
        ...

    def update(self, *args, **kwargs) -> ...:
        ...

    def add(self, *args, **kwargs) -> ...:
        ...

    def difference(self, *args, **kwargs) -> ...:
        ...

    def difference_update(self, *args, **kwargs) -> ...:
        ...

    def discard(self, *args, **kwargs) -> ...:
        ...

    def intersection(self, *args, **kwargs) -> ...:
        ...

    def intersection_update(self, *args, **kwargs) -> ...:
        ...

    def isdisjoint(self, *args, **kwargs) -> ...:
        ...

    def issubset(self, *args, **kwargs) -> ...:
        ...

    def issuperset(self, *args, **kwargs) -> ...:
        ...

    def symmetric_difference(self, *args, **kwargs) -> ...:
        ...

    def symmetric_difference_update(self, *args, **kwargs) -> ...:
        ...

    def union(self, *args, **kwargs) -> ...:
        ...

def setattr(*args, **kwargs) -> ...:
    ...

def sorted(*args, **kwargs) -> ...:
    ...


class str():
    def __init__(self, *argv, **kwargs) -> None:
        ...

    def count(self, *args, **kwargs) -> ...:
        ...

    def endswith(self, *args, **kwargs) -> ...:
        ...

    def find(self, *args, **kwargs) -> ...:
        ...

    def format(self, *args, **kwargs) -> ...:
        ...

    def index(self, *args, **kwargs) -> ...:
        ...

    def isalpha(self, *args, **kwargs) -> ...:
        ...

    def isdigit(self, *args, **kwargs) -> ...:
        ...

    def islower(self, *args, **kwargs) -> ...:
        ...

    def isspace(self, *args, **kwargs) -> ...:
        ...

    def isupper(self, *args, **kwargs) -> ...:
        ...

    def join(self, *args, **kwargs) -> ...:
        ...

    def lower(self, *args, **kwargs) -> ...:
        ...

    def lstrip(self, *args, **kwargs) -> ...:
        ...

    def replace(self, *args, **kwargs) -> ...:
        ...

    def rfind(self, *args, **kwargs) -> ...:
        ...

    def rindex(self, *args, **kwargs) -> ...:
        ...

    def rsplit(self, *args, **kwargs) -> ...:
        ...

    def rstrip(self, *args, **kwargs) -> ...:
        ...

    def split(self, *args, **kwargs) -> ...:
        ...

    def startswith(self, *args, **kwargs) -> ...:
        ...

    def strip(self, *args, **kwargs) -> ...:
        ...

    def upper(self, *args, **kwargs) -> ...:
        ...

    def center(self, *args, **kwargs) -> ...:
        ...

    def encode(self, *args, **kwargs) -> ...:
        ...

    def partition(self, *args, **kwargs) -> ...:
        ...

    def rpartition(self, *args, **kwargs) -> ...:
        ...

    def splitlines(self, *args, **kwargs) -> ...:
        ...

def sum(*args, **kwargs) -> ...:
    ...


class super():
    def __init__(self, *argv, **kwargs) -> None:
        ...


class tuple():
    def __init__(self, *argv, **kwargs) -> None:
        ...

    def count(self, *args, **kwargs) -> ...:
        ...

    def index(self, *args, **kwargs) -> ...:
        ...


class type():
    def __init__(self, *argv, **kwargs) -> None:
        ...


class zip():
    def __init__(self, *argv, **kwargs) -> None:
        ...

NotImplemented : ... ## <class ''> = NotImplemented

class StopAsyncIteration():
    def __init__(self, *argv, **kwargs) -> None:
        ...


class UnicodeError(Exception):
    ...

class ViperTypeError(Exception):
    ...
def bin(*args, **kwargs) -> ...:
    ...

def compile(*args, **kwargs) -> ...:
    ...


class complex():
    def __init__(self, *argv, **kwargs) -> None:
        ...

def delattr(*args, **kwargs) -> ...:
    ...


class enumerate():
    def __init__(self, *argv, **kwargs) -> None:
        ...

def execfile(*args, **kwargs) -> ...:
    ...


class filter():
    def __init__(self, *argv, **kwargs) -> None:
        ...


class float():
    def __init__(self, *argv, **kwargs) -> None:
        ...


class frozenset():
    def __init__(self, *argv, **kwargs) -> None:
        ...

    def copy(self, *args, **kwargs) -> ...:
        ...

    def difference(self, *args, **kwargs) -> ...:
        ...

    def intersection(self, *args, **kwargs) -> ...:
        ...

    def isdisjoint(self, *args, **kwargs) -> ...:
        ...

    def issubset(self, *args, **kwargs) -> ...:
        ...

    def issuperset(self, *args, **kwargs) -> ...:
        ...

    def symmetric_difference(self, *args, **kwargs) -> ...:
        ...

    def union(self, *args, **kwargs) -> ...:
        ...

def help(*args, **kwargs) -> ...:
    ...

def hex(*args, **kwargs) -> ...:
    ...

def input(*args, **kwargs) -> ...:
    ...

def max(*args, **kwargs) -> ...:
    ...


class memoryview():
    def __init__(self, *argv, **kwargs) -> None:
        ...

def min(*args, **kwargs) -> ...:
    ...

def oct(*args, **kwargs) -> ...:
    ...


class property():
    def __init__(self, *argv, **kwargs) -> None:
        ...

    def deleter(self, *args, **kwargs) -> ...:
        ...

    def getter(self, *args, **kwargs) -> ...:
        ...

    def setter(self, *args, **kwargs) -> ...:
        ...


class reversed():
    def __init__(self, *argv, **kwargs) -> None:
        ...


class slice():
    def __init__(self, *argv, **kwargs) -> None:
        ...

